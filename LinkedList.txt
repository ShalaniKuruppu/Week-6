//Implement Stack and its functions using LinkedList 
#include <iostream>
#include <chrono>
using namespace std;
using namespace std::chrono;

class Node {
    public:
        int data; // Data of the node
        Node* next; // Pointer to the next node

        Node(int value) {
            data = value;
            next = nullptr;
        }
};

class Stack {
    private:
        Node* top; // Pointer to the top node of the stack

    public:
        Stack() {
            top = nullptr; // Initialize the top pointer to null (empty stack)
        }

        bool is_empty() {
            return top == nullptr;
        }

        void push(int value) {
            Node* new_node = new Node(value);
            new_node->next = top;
            top = new_node;
        }

        int pop() {
            if (!is_empty()) {
                int value = top->data;
                Node* temp = top;
                top = top->next;
                delete temp;
                return value;
            }
            else {
                cout << "Stack Underflow!" << endl;
                return -1;
            }
        }

        int peek() {
            if (!is_empty()) {
                return top->data;
            }
            else {
                cout << "Stack is empty!" << endl;
                return -1;
            }
        }

        void display() {
            Node* temp = top;
            while (temp != nullptr) {
                cout << temp->data << " ";
                temp = temp->next;
            }
            cout << endl;
        }
};

int main() {
    
    Stack s;
    auto start = high_resolution_clock::now();  // start the clock
    s.push(8);
    s.push(10);
    s.push(5);
    s.push(11);
    s.push(15);
    s.push(23);
    s.push(6);
    s.push(18);
    s.push(20);
    s.push(17);
    s.display();
    s.pop() * 5 ;
    s.display();
    s.push(4);
    s.push(30);
    s.push(3);
    s.push(1);
    s.display();
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << "Time taken is: "<< duration.count() << endl;

   

    return 0;
}
